package xyz.warringtons.daterandevu.Modules;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YELP_BUSINESSES".
*/
public class YelpBusinessesDao extends AbstractDao<YelpBusinesses, Long> {

    public static final String TABLENAME = "YELP_BUSINESSES";

    /**
     * Properties of entity YelpBusinesses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Image_url = new Property(2, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Is_closed = new Property(3, Boolean.class, "is_closed", false, "IS_CLOSED");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Rate = new Property(5, String.class, "rate", false, "RATE");
        public final static Property Price = new Property(6, String.class, "price", false, "PRICE");
    }


    public YelpBusinessesDao(DaoConfig config) {
        super(config);
    }
    
    public YelpBusinessesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YELP_BUSINESSES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE_URL\" TEXT," + // 2: image_url
                "\"IS_CLOSED\" INTEGER," + // 3: is_closed
                "\"URL\" TEXT," + // 4: url
                "\"RATE\" TEXT," + // 5: rate
                "\"PRICE\" TEXT);"); // 6: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YELP_BUSINESSES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YelpBusinesses entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
 
        Boolean is_closed = entity.getIs_closed();
        if (is_closed != null) {
            stmt.bindLong(4, is_closed ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(6, rate);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YelpBusinesses entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
 
        Boolean is_closed = entity.getIs_closed();
        if (is_closed != null) {
            stmt.bindLong(4, is_closed ? 1L: 0L);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(6, rate);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public YelpBusinesses readEntity(Cursor cursor, int offset) {
        YelpBusinesses entity = new YelpBusinesses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_url
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // is_closed
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YelpBusinesses entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_closed(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(YelpBusinesses entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(YelpBusinesses entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(YelpBusinesses entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
