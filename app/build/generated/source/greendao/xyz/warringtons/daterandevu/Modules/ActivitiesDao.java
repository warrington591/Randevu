package xyz.warringtons.daterandevu.Modules;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITIES".
*/
public class ActivitiesDao extends AbstractDao<Activities, Long> {

    public static final String TABLENAME = "ACTIVITIES";

    /**
     * Properties of entity Activities.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirebaseId = new Property(1, String.class, "firebaseId", false, "FIREBASE_ID");
        public final static Property CategoryId = new Property(2, String.class, "CategoryId", false, "CATEGORY_ID");
        public final static Property ActivityName = new Property(3, String.class, "ActivityName", false, "ACTIVITY_NAME");
        public final static Property WeatherCondition = new Property(4, String.class, "WeatherCondition", false, "WEATHER_CONDITION");
        public final static Property Selected = new Property(5, Boolean.class, "selected", false, "SELECTED");
        public final static Property Deleted = new Property(6, Boolean.class, "deleted", false, "DELETED");
        public final static Property Location = new Property(7, String.class, "location", false, "LOCATION");
        public final static Property PicDatabaseId = new Property(8, String.class, "picDatabaseId", false, "PIC_DATABASE_ID");
        public final static Property YelpKeyword = new Property(9, String.class, "yelpKeyword", false, "YELP_KEYWORD");
        public final static Property Complete = new Property(10, Boolean.class, "complete", false, "COMPLETE");
    }


    public ActivitiesDao(DaoConfig config) {
        super(config);
    }
    
    public ActivitiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITIES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIREBASE_ID\" TEXT," + // 1: firebaseId
                "\"CATEGORY_ID\" TEXT," + // 2: CategoryId
                "\"ACTIVITY_NAME\" TEXT," + // 3: ActivityName
                "\"WEATHER_CONDITION\" TEXT," + // 4: WeatherCondition
                "\"SELECTED\" INTEGER," + // 5: selected
                "\"DELETED\" INTEGER," + // 6: deleted
                "\"LOCATION\" TEXT," + // 7: location
                "\"PIC_DATABASE_ID\" TEXT," + // 8: picDatabaseId
                "\"YELP_KEYWORD\" TEXT," + // 9: yelpKeyword
                "\"COMPLETE\" INTEGER NOT NULL );"); // 10: complete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Activities entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firebaseId = entity.getFirebaseId();
        if (firebaseId != null) {
            stmt.bindString(2, firebaseId);
        }
 
        String CategoryId = entity.getCategoryId();
        if (CategoryId != null) {
            stmt.bindString(3, CategoryId);
        }
 
        String ActivityName = entity.getActivityName();
        if (ActivityName != null) {
            stmt.bindString(4, ActivityName);
        }
 
        String WeatherCondition = entity.getWeatherCondition();
        if (WeatherCondition != null) {
            stmt.bindString(5, WeatherCondition);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(6, selected ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1L: 0L);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(8, location);
        }
 
        String picDatabaseId = entity.getPicDatabaseId();
        if (picDatabaseId != null) {
            stmt.bindString(9, picDatabaseId);
        }
 
        String yelpKeyword = entity.getYelpKeyword();
        if (yelpKeyword != null) {
            stmt.bindString(10, yelpKeyword);
        }
        stmt.bindLong(11, entity.getComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Activities entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firebaseId = entity.getFirebaseId();
        if (firebaseId != null) {
            stmt.bindString(2, firebaseId);
        }
 
        String CategoryId = entity.getCategoryId();
        if (CategoryId != null) {
            stmt.bindString(3, CategoryId);
        }
 
        String ActivityName = entity.getActivityName();
        if (ActivityName != null) {
            stmt.bindString(4, ActivityName);
        }
 
        String WeatherCondition = entity.getWeatherCondition();
        if (WeatherCondition != null) {
            stmt.bindString(5, WeatherCondition);
        }
 
        Boolean selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(6, selected ? 1L: 0L);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1L: 0L);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(8, location);
        }
 
        String picDatabaseId = entity.getPicDatabaseId();
        if (picDatabaseId != null) {
            stmt.bindString(9, picDatabaseId);
        }
 
        String yelpKeyword = entity.getYelpKeyword();
        if (yelpKeyword != null) {
            stmt.bindString(10, yelpKeyword);
        }
        stmt.bindLong(11, entity.getComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Activities readEntity(Cursor cursor, int offset) {
        Activities entity = new Activities( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firebaseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CategoryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ActivityName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // WeatherCondition
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // selected
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // deleted
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // location
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picDatabaseId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // yelpKeyword
            cursor.getShort(offset + 10) != 0 // complete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Activities entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirebaseId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeatherCondition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSelected(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLocation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicDatabaseId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setYelpKeyword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComplete(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Activities entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Activities entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Activities entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
